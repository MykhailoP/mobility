/*
 * This file is generated by jOOQ.
 */
package com.allane.mobility.persistence.tables;


import com.allane.mobility.persistence.Allmob;
import com.allane.mobility.persistence.Indexes;
import com.allane.mobility.persistence.Keys;
import com.allane.mobility.persistence.tables.records.AmLeasingContractRecord;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function5;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AmLeasingContract extends TableImpl<AmLeasingContractRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>allmob.am_leasing_contract</code>
     */
    public static final AmLeasingContract AM_LEASING_CONTRACT = new AmLeasingContract();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AmLeasingContractRecord> getRecordType() {
        return AmLeasingContractRecord.class;
    }

    /**
     * The column <code>allmob.am_leasing_contract.ID_contract_number</code>.
     */
    public final TableField<AmLeasingContractRecord, Integer> ID_CONTRACT_NUMBER = createField(DSL.name("ID_contract_number"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>allmob.am_leasing_contract.ID_vehicle</code>.
     */
    public final TableField<AmLeasingContractRecord, Integer> ID_VEHICLE = createField(DSL.name("ID_vehicle"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>allmob.am_leasing_contract.monthly_rate</code>.
     */
    public final TableField<AmLeasingContractRecord, BigDecimal> MONTHLY_RATE = createField(DSL.name("monthly_rate"), SQLDataType.DECIMAL(10, 2).nullable(false).defaultValue(DSL.field(DSL.raw("0.00"), SQLDataType.DECIMAL)), this, "");

    /**
     * The column <code>allmob.am_leasing_contract.changed</code>.
     */
    public final TableField<AmLeasingContractRecord, LocalDateTime> CHANGED = createField(DSL.name("changed"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("current_timestamp()"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>allmob.am_leasing_contract.ID_user_change</code>.
     */
    public final TableField<AmLeasingContractRecord, Integer> ID_USER_CHANGE = createField(DSL.name("ID_user_change"), SQLDataType.INTEGER.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.INTEGER)), this, "");

    private AmLeasingContract(Name alias, Table<AmLeasingContractRecord> aliased) {
        this(alias, aliased, null);
    }

    private AmLeasingContract(Name alias, Table<AmLeasingContractRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>allmob.am_leasing_contract</code> table reference
     */
    public AmLeasingContract(String alias) {
        this(DSL.name(alias), AM_LEASING_CONTRACT);
    }

    /**
     * Create an aliased <code>allmob.am_leasing_contract</code> table reference
     */
    public AmLeasingContract(Name alias) {
        this(alias, AM_LEASING_CONTRACT);
    }

    /**
     * Create a <code>allmob.am_leasing_contract</code> table reference
     */
    public AmLeasingContract() {
        this(DSL.name("am_leasing_contract"), null);
    }

    public <O extends Record> AmLeasingContract(Table<O> child, ForeignKey<O, AmLeasingContractRecord> key) {
        super(child, key, AM_LEASING_CONTRACT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Allmob.ALLMOB;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.AM_LEASING_CONTRACT_INDX_AM_USER);
    }

    @Override
    public UniqueKey<AmLeasingContractRecord> getPrimaryKey() {
        return Keys.KEY_AM_LEASING_CONTRACT_PRIMARY;
    }

    @Override
    public AmLeasingContract as(String alias) {
        return new AmLeasingContract(DSL.name(alias), this);
    }

    @Override
    public AmLeasingContract as(Name alias) {
        return new AmLeasingContract(alias, this);
    }

    @Override
    public AmLeasingContract as(Table<?> alias) {
        return new AmLeasingContract(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public AmLeasingContract rename(String name) {
        return new AmLeasingContract(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AmLeasingContract rename(Name name) {
        return new AmLeasingContract(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public AmLeasingContract rename(Table<?> name) {
        return new AmLeasingContract(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, Integer, BigDecimal, LocalDateTime, Integer> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function5<? super Integer, ? super Integer, ? super BigDecimal, ? super LocalDateTime, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function5<? super Integer, ? super Integer, ? super BigDecimal, ? super LocalDateTime, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
