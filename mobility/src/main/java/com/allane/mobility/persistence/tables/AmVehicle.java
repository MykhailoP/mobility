/*
 * This file is generated by jOOQ.
 */
package com.allane.mobility.persistence.tables;


import com.allane.mobility.persistence.Allmob;
import com.allane.mobility.persistence.Keys;
import com.allane.mobility.persistence.tables.records.AmVehicleRecord;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function8;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AmVehicle extends TableImpl<AmVehicleRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>allmob.am_vehicle</code>
     */
    public static final AmVehicle AM_VEHICLE = new AmVehicle();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AmVehicleRecord> getRecordType() {
        return AmVehicleRecord.class;
    }

    /**
     * The column <code>allmob.am_vehicle.ID_vehicle</code>.
     */
    public final TableField<AmVehicleRecord, Integer> ID_VEHICLE = createField(DSL.name("ID_vehicle"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>allmob.am_vehicle.brand</code>.
     */
    public final TableField<AmVehicleRecord, String> BRAND = createField(DSL.name("brand"), SQLDataType.VARCHAR(128).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>allmob.am_vehicle.model</code>.
     */
    public final TableField<AmVehicleRecord, String> MODEL = createField(DSL.name("model"), SQLDataType.VARCHAR(128).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>allmob.am_vehicle.model_year</code>.
     */
    public final TableField<AmVehicleRecord, Integer> MODEL_YEAR = createField(DSL.name("model_year"), SQLDataType.INTEGER.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>allmob.am_vehicle.vin_code</code>.
     */
    public final TableField<AmVehicleRecord, String> VIN_CODE = createField(DSL.name("vin_code"), SQLDataType.VARCHAR(128).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>allmob.am_vehicle.price</code>.
     */
    public final TableField<AmVehicleRecord, BigDecimal> PRICE = createField(DSL.name("price"), SQLDataType.DECIMAL(10, 2).nullable(false).defaultValue(DSL.field(DSL.raw("0.00"), SQLDataType.DECIMAL)), this, "");

    /**
     * The column <code>allmob.am_vehicle.changed</code>.
     */
    public final TableField<AmVehicleRecord, LocalDateTime> CHANGED = createField(DSL.name("changed"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("current_timestamp()"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>allmob.am_vehicle.ID_user_change</code>.
     */
    public final TableField<AmVehicleRecord, Integer> ID_USER_CHANGE = createField(DSL.name("ID_user_change"), SQLDataType.INTEGER.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.INTEGER)), this, "");

    private AmVehicle(Name alias, Table<AmVehicleRecord> aliased) {
        this(alias, aliased, null);
    }

    private AmVehicle(Name alias, Table<AmVehicleRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>allmob.am_vehicle</code> table reference
     */
    public AmVehicle(String alias) {
        this(DSL.name(alias), AM_VEHICLE);
    }

    /**
     * Create an aliased <code>allmob.am_vehicle</code> table reference
     */
    public AmVehicle(Name alias) {
        this(alias, AM_VEHICLE);
    }

    /**
     * Create a <code>allmob.am_vehicle</code> table reference
     */
    public AmVehicle() {
        this(DSL.name("am_vehicle"), null);
    }

    public <O extends Record> AmVehicle(Table<O> child, ForeignKey<O, AmVehicleRecord> key) {
        super(child, key, AM_VEHICLE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Allmob.ALLMOB;
    }

    @Override
    public UniqueKey<AmVehicleRecord> getPrimaryKey() {
        return Keys.KEY_AM_VEHICLE_PRIMARY;
    }

    @Override
    public AmVehicle as(String alias) {
        return new AmVehicle(DSL.name(alias), this);
    }

    @Override
    public AmVehicle as(Name alias) {
        return new AmVehicle(alias, this);
    }

    @Override
    public AmVehicle as(Table<?> alias) {
        return new AmVehicle(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public AmVehicle rename(String name) {
        return new AmVehicle(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AmVehicle rename(Name name) {
        return new AmVehicle(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public AmVehicle rename(Table<?> name) {
        return new AmVehicle(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<Integer, String, String, Integer, String, BigDecimal, LocalDateTime, Integer> fieldsRow() {
        return (Row8) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function8<? super Integer, ? super String, ? super String, ? super Integer, ? super String, ? super BigDecimal, ? super LocalDateTime, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function8<? super Integer, ? super String, ? super String, ? super Integer, ? super String, ? super BigDecimal, ? super LocalDateTime, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
