/*
 * This file is generated by jOOQ.
 */
package com.allane.mobility.persistence.tables;


import com.allane.mobility.persistence.Allmob;
import com.allane.mobility.persistence.Indexes;
import com.allane.mobility.persistence.Keys;
import com.allane.mobility.persistence.tables.records.AmUserRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function6;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.UShort;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AmUser extends TableImpl<AmUserRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>allmob.am_user</code>
     */
    public static final AmUser AM_USER = new AmUser();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AmUserRecord> getRecordType() {
        return AmUserRecord.class;
    }

    /**
     * The column <code>allmob.am_user.ID_user</code>.
     */
    public final TableField<AmUserRecord, UShort> ID_USER = createField(DSL.name("ID_user"), SQLDataType.SMALLINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>allmob.am_user.name</code>.
     */
    public final TableField<AmUserRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(128).nullable(false), this, "");

    /**
     * The column <code>allmob.am_user.surname</code>.
     */
    public final TableField<AmUserRecord, String> SURNAME = createField(DSL.name("surname"), SQLDataType.VARCHAR(128).nullable(false), this, "");

    /**
     * The column <code>allmob.am_user.email</code>.
     */
    public final TableField<AmUserRecord, String> EMAIL = createField(DSL.name("email"), SQLDataType.VARCHAR(128).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>allmob.am_user.changed</code>.
     */
    public final TableField<AmUserRecord, LocalDateTime> CHANGED = createField(DSL.name("changed"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("current_timestamp()"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>allmob.am_user.ID_user_change</code>.
     */
    public final TableField<AmUserRecord, UShort> ID_USER_CHANGE = createField(DSL.name("ID_user_change"), SQLDataType.SMALLINTUNSIGNED.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.SMALLINTUNSIGNED)), this, "");

    private AmUser(Name alias, Table<AmUserRecord> aliased) {
        this(alias, aliased, null);
    }

    private AmUser(Name alias, Table<AmUserRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>allmob.am_user</code> table reference
     */
    public AmUser(String alias) {
        this(DSL.name(alias), AM_USER);
    }

    /**
     * Create an aliased <code>allmob.am_user</code> table reference
     */
    public AmUser(Name alias) {
        this(alias, AM_USER);
    }

    /**
     * Create a <code>allmob.am_user</code> table reference
     */
    public AmUser() {
        this(DSL.name("am_user"), null);
    }

    public <O extends Record> AmUser(Table<O> child, ForeignKey<O, AmUserRecord> key) {
        super(child, key, AM_USER);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Allmob.ALLMOB;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.AM_USER_INDX_AM_USER);
    }

    @Override
    public UniqueKey<AmUserRecord> getPrimaryKey() {
        return Keys.KEY_AM_USER_PRIMARY;
    }

    @Override
    public AmUser as(String alias) {
        return new AmUser(DSL.name(alias), this);
    }

    @Override
    public AmUser as(Name alias) {
        return new AmUser(alias, this);
    }

    @Override
    public AmUser as(Table<?> alias) {
        return new AmUser(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public AmUser rename(String name) {
        return new AmUser(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AmUser rename(Name name) {
        return new AmUser(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public AmUser rename(Table<?> name) {
        return new AmUser(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<UShort, String, String, String, LocalDateTime, UShort> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function6<? super UShort, ? super String, ? super String, ? super String, ? super LocalDateTime, ? super UShort, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function6<? super UShort, ? super String, ? super String, ? super String, ? super LocalDateTime, ? super UShort, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
