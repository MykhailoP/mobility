//import nu.studer.gradle.jooq.JooqEdition

buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
    }

    dependencies {
        /* See above for the correct groupId */
        classpath 'org.jooq:jooq-codegen:3.18.4'
        classpath 'org.mariadb.jdbc:mariadb-java-client:3.1.4'
    }
}

plugins {
    //id 'nu.studer.plugindev' version '4.1'
    id 'org.springframework.boot' version '2.7.12'
    id 'io.spring.dependency-management' version '1.0.15.RELEASE'
    id 'org.asciidoctor.jvm.convert' version '3.3.2'
    id 'java'
}

group = 'com.allane'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

repositories {
    mavenCentral()
}

ext {
    set('snippetsDir', file("build/generated-snippets"))
    set('springBootAdminVersion', "2.7.4")
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-cache'
    implementation 'org.springframework.boot:spring-boot-starter-data-rest'
    implementation 'org.springframework.boot:spring-boot-starter-hateoas'
    implementation 'org.springframework.boot:spring-boot-starter-jooq'
    implementation 'org.springframework.boot:spring-boot-starter-quartz'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-web-services'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'de.codecentric:spring-boot-admin-starter-client'
    implementation 'de.codecentric:spring-boot-admin-starter-server'
    implementation 'org.springframework.data:spring-data-rest-hal-explorer'
    implementation 'org.springframework.session:spring-session-core'
    implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity5'
    implementation 'org.mariadb.jdbc:mariadb-java-client:3.1.4'
    implementation 'com.zaxxer:HikariCP:5.0.1'
    implementation 'org.springdoc:springdoc-openapi-ui:1.6.14'
    implementation 'org.springdoc:springdoc-openapi-data-rest:1.6.14'
    implementation 'org.springdoc:springdoc-openapi-security:1.6.14'
    implementation 'io.swagger.core.v3:swagger-project:2.2.10'
    implementation 'io.swagger.core.v3:swagger-models:2.2.10'
    implementation 'org.flywaydb:flyway-core:9.16.1'
    implementation 'org.flywaydb:flyway-mysql:9.16.1'
    implementation 'org.flywaydb:flyway-sqlserver:9.16.1'
    implementation 'org.jooq:jooq:3.18.4'
    implementation 'org.jooq:jooq-meta:3.18.4'
    implementation 'org.jooq:jooq-codegen:3.18.4'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'io.projectreactor:reactor-test'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    testImplementation 'org.springframework.security:spring-security-test'
}

dependencyManagement {
    imports {
        mavenBom "de.codecentric:spring-boot-admin-dependencies:${springBootAdminVersion}"
    }
}

tasks.named('test') {
    outputs.dir snippetsDir
    useJUnitPlatform()
}

tasks.named('asciidoctor') {
    inputs.dir snippetsDir
    dependsOn test
}

import org.jooq.codegen.GenerationTool
import org.jooq.meta.jaxb.*

task generateEntities {

    def outputDirectory = projectDir.toString() + '/src/main/java'
    org.jooq.meta.jaxb.Configuration configuration = new org.jooq.meta.jaxb.Configuration()
            .withJdbc(new Jdbc()
                    .withDriver("org.mariadb.jdbc.Driver")
                    .withUrl("jdbc:mariadb://127.0.0.1:3306/allmob")
                    .withSchema("allmob")
                    .withUser("root")
                    .withPassword("111111"))
            .withGenerator(new Generator()
                    .withDatabase(new Database()
                            .withName("org.jooq.meta.mariadb.MariaDBDatabase")
                            .withIncludes(".*")
                            .withExcludes("")
                            .withInputSchema("allmob"))
                    .withGenerate(new Generate()
                            .withPojos(true)
                            .withDaos(true))
                    .withTarget(new Target()
                            .withPackageName("com.allane.mobility.persistence")
                            .withDirectory(outputDirectory)))

    doLast {
        GenerationTool.generate(configuration)
    }
}

/*gradlePlugin {
    website = 'https://github.com/etiennestuder/gradle-jooq-plugin'
    vcsUrl = 'https://github.com/etiennestuder/gradle-jooq-plugin'
    plugins {
        pluginDevPlugin {
            id = 'nu.studer.jooq'
            displayName = 'gradle-jooq-plugin'
            description = 'Gradle plugin that integrates jOOQ.'
            tags.set(['jooq'])
            implementationClass = 'nu.studer.gradle.jooq.JooqPlugin'
        }
    }
}*/

/*
jooq {


    configurations {
        main { // name of the jOOQ configuration
            generateSchemaSourceOnCompilation = true // default (can be omitted)


            generationTool {
//logging = Logging.WARN
                jdbc {
                    driver = 'org.mariadb.jdbc.Driver'
                    url = 'jdbc:mariadb://127.0.0.1:3306/allmob'
                    user = 'root'
                    password = '111111'
                    properties {
                        property {
                            key = 'ssl'
                            value = 'true'
                        }
                    }
                }
                generator {
                    name = 'org.jooq.codegen.DefaultGenerator'
                    database {
                        name = 'org.jooq.meta.mariadb.MariaDBDatabase'
                        inputSchema = 'allmob'
                        forcedTypes {
                            forcedType {
                                name = 'varchar'
                                includeExpression = '.*'
                                includeTypes = 'JSONB?'
                            }
                            forcedType {
                                name = 'varchar'
                                includeExpression = '.*'
                                includeTypes = 'INET'
                            }
                        }
                    }
                    generate {
                        deprecated = false
                        records = true
                        immutablePojos = true
                        fluentSetters = true
                    }
                    target {
                        packageName = 'nu.studer.sample'
                        directory = 'build/generated-src/jooq/main' // default (can be omitted)
                    }
                    strategy.name = 'org.jooq.codegen.DefaultGeneratorStrategy'
                }
            }
        }
    }
}
*/


